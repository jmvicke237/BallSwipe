class _L3 extends AudioWorkletProcessor{constructor(){super();this._M3=true;this.port.onmessage=(_N3)=>{if(_N3.data==="kill")this._M3=false;};}}class _O3 extends _L3{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}process(_P3,_Q3,parameters){const _R3=_P3[0];for(let c=0;c<_R3.length;++c){const _S3=_R3[c];for(let _T3=0;_T3<_S3.length;++_T3)_Q3[parameters.bypass[_T3]??parameters.bypass[0]][c][_T3]=_S3[_T3];}return this._M3;}}class _U3 extends _L3{
static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}process(_P3,_Q3,parameters){const _V3=_P3[0];const _W3=_P3[1];const _X3=_Q3[0];const gain=parameters.gain;for(let c=0;c<_W3.length;++c){const _S3=_W3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3)_Y3[_T3]=_S3[_T3];}for(let c=0;c<_V3.length;++c){const _S3=_V3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3)_Y3[_T3]+=_S3[_T3]*(gain[_T3]??gain[0]);}return this._M3;}}registerProcessor("audio-bus-input",
_O3);registerProcessor("audio-bus-output",_U3);class _Z3 extends _L3{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"factor",automationRate:"a-rate",defaultValue:1,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",defaultValue:16,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}static __3=[undefined,
undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_04){super();const _14=_04.outputChannelCount[0];this._24=new Float32Array(_14);this._34=new Uint32Array(_14);}process(_P3,_Q3,parameters){const _R3=_P3[0];const _X3=_Q3[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<_R3.length;++c){const _S3=_R3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3){_Y3[_T3]=_S3[_T3];
if(this._34[c]===0)this._24[c]=_S3[_T3];++this._34[c];this._34[c]%=(factor[_T3]??factor[0]);if(bypass[_T3]??bypass[0])continue;let _44=this._24[c];const _54=(gain[_T3]??gain[0]);_44*=_54;_44=Math.max(Math.min(_44,1.0),-1.0);const _64=resolution[_T3]??resolution[0];const max=(_44>0.0)?_Z3.__3[_64]-1:_Z3.__3[_64];_44=Math.round(_44*max)/max;const _74=(mix[_T3]??mix[0]);_Y3[_T3]*=(1.0-_74);_Y3[_T3]+=(_44*_74);}}return this._M3;}}registerProcessor("bitcrusher-processor",_Z3);class _84 extends _L3{static _94=5;
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:_84._94},{name:"feedback",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"mix",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(_04){super();const _14=_04.outputChannelCount[0];const _a4=_84._94*sampleRate;this.buffer=new Array(_14);this._b4=new Uint32Array(_14);for(let c=0;
c<_14;++c)this.buffer[c]=new Float32Array(_a4);}process(_P3,_Q3,parameters){const _R3=_P3[0];const _X3=_Q3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<_R3.length;++c){const _S3=_R3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3){_Y3[_T3]=_S3[_T3];const _c4=this._d4(c,(time[_T3]??time[0]));const _e4=_S3[_T3]+(_c4*(feedback[_T3]??feedback[0]));this.write(c,_e4);if((bypass[_T3]??bypass[0]))continue;const _74=(mix[_T3]??mix[0]);
_Y3[_T3]*=(1-_74);_Y3[_T3]+=(_c4*_74);}}return this._M3;}_d4(_f4,_g4){const _h4=_g4*sampleRate;let _i4=(this._b4[_f4]-~~_h4);let _j4=(_i4-1);while(_i4<0)_i4+=this.buffer[_f4].length;while(_j4<0)_j4+=this.buffer[_f4].length;const frac=_h4-~~_h4;const _k4=this.buffer[_f4][_i4];const _l4=this.buffer[_f4][_j4];return _k4+(_l4-_k4)*frac;}write(_f4,_m4){++this._b4[_f4];this._b4[_f4]%=this.buffer[_f4].length;this.buffer[_f4][this._b4[_f4]]=_m4;}}registerProcessor("delay-processor",_84);class _n4 extends _L3{static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}process(_P3,_Q3,parameters){const _R3=_P3[0];const _X3=_Q3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<_R3.length;++c){const _S3=_R3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3){_Y3[_T3]=_S3[_T3];if(bypass[_T3]??bypass[0])continue;_Y3[_T3]*=(gain[_T3]??gain[0]);}}return this._M3;}}registerProcessor("gain-processor",
_n4);class _o4 extends _L3{static get parameterDescriptors(){const _p4=Math.min(sampleRate/2,20000);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:10,minValue:10,maxValue:_p4},{name:"q",automationRate:"a-rate",defaultValue:1,minValue:1,maxValue:100}];}constructor(_04){super();const _14=_04.outputChannelCount[0];this._q4=0;this._r4=0;this._s4=0;this._t4=0;this._u4=0;this._v4=new Float32Array(_14);this._w4=new Float32Array(_14);
this._x4=new Float32Array(_14);this._y4=new Float32Array(_14);this._z4=-1;this._A4=-1;}process(_P3,_Q3,parameters){const _R3=_P3[0];const _X3=_Q3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _B4=(cutoff.length===1&&q.length===1);if(_B4)this._C4(cutoff[0],q[0]);for(let c=0;c<_R3.length;++c){const _S3=_R3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3){if(!_B4)this._C4(cutoff[_T3]??cutoff[0],q[_T3]??q[0]);const _D4=this._s4*_S3[_T3]+this._t4*this._v4[c]+this._u4*this._w4[c]-this._q4*this._x4[c]-this._r4*this._y4[c];
this._w4[c]=this._v4[c];this._v4[c]=_S3[_T3];this._y4[c]=this._x4[c];this._x4[c]=_D4;_Y3[_T3]=(bypass[_T3]??bypass[0])?_S3[_T3]:_D4;}}return this._M3;}_C4(_E4,_F4){if(_E4===this._z4&&_F4===this._A4)return;const _G4=2*Math.PI*_E4/sampleRate;const alpha=Math.sin(_G4)/(2*_F4);const _H4=Math.cos(_G4);const _I4=1+alpha;const _q4=-2*_H4;const _r4=1-alpha;const _s4=(1+_H4)/2;const _t4=-1-_H4;const _u4=(1+_H4)/2;this._q4=_q4/_I4;this._r4=_r4/_I4;this._s4=_s4/_I4;this._t4=_t4/_I4;this._u4=_u4/_I4;this._z4=_E4;this._A4=_F4;
}}registerProcessor("hpf2-processor",_o4);class _J4 extends _L3{static get parameterDescriptors(){const _p4=Math.min(sampleRate/2,20000);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:_p4,minValue:10,maxValue:_p4},{name:"q",automationRate:"a-rate",defaultValue:1,minValue:1,maxValue:100}];}constructor(_04){super();const _14=_04.outputChannelCount[0];this._q4=0;this._r4=0;this._s4=0;this._t4=0;this._u4=0;this._v4=new Float32Array(_14);
this._w4=new Float32Array(_14);this._x4=new Float32Array(_14);this._y4=new Float32Array(_14);this._z4=-1;this._A4=-1;}process(_P3,_Q3,parameters){const _R3=_P3[0];const _X3=_Q3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _B4=(cutoff.length===1&&q.length===1);if(_B4)this._C4(cutoff[0],q[0]);for(let c=0;c<_R3.length;++c){const _S3=_R3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3){if(!_B4)this._C4(cutoff[_T3]??cutoff[0],q[_T3]??q[0]);const _D4=this._s4*_S3[_T3]+this._t4*this._v4[c]+this._u4*this._w4[c]-this._q4*this._x4[c]-this._r4*this._y4[c];
this._w4[c]=this._v4[c];this._v4[c]=_S3[_T3];this._y4[c]=this._x4[c];this._x4[c]=_D4;_Y3[_T3]=(bypass[_T3]??bypass[0])?_S3[_T3]:_D4;}}return this._M3;}_C4(_E4,_F4){if(_E4===this._z4&&_F4===this._A4)return;const _G4=2*Math.PI*_E4/sampleRate;const alpha=Math.sin(_G4)/(2*_F4);const _H4=Math.cos(_G4);const _I4=1+alpha;const _q4=-2*_H4;const _r4=1-alpha;const _s4=(1-_H4)/2;const _t4=1-_H4;const _u4=(1-_H4)/2;this._q4=_q4/_I4;this._r4=_r4/_I4;this._s4=_s4/_I4;this._t4=_t4/_I4;this._u4=_u4/_I4;this._z4=_E4;this._A4=_F4;
}}registerProcessor("lpf2-processor",_J4);class _K4{constructor(_L4){this._M4=0;this._N4=0;this.feedback=0;this._O4=0;this.buffer=new Float32Array(_L4);this._P4=0;}process(_m4){const out=this.buffer[this._P4];this._O4=(this._O4*this._M4)+(out*this._N4);this.buffer[this._P4]=_m4+(this._O4*this.feedback);++this._P4;this._P4%=this.buffer.length;return out;}_Q4(_R4){this.feedback=Math.min(Math.max(0,_R4),1);}_S4(_T4){this._M4=Math.min(Math.max(0,_T4),1);this._N4=1-this._M4;}}class _U4{constructor(_L4){this.feedback=0;
this.buffer=new Float32Array(_L4);this._P4=0;}process(_m4){const out=this.buffer[this._P4];this.buffer[this._P4]=_m4+(out*this.feedback);++this._P4;this._P4%=this.buffer.length;return(out-_m4);}_Q4(_R4){this.feedback=Math.min(Math.max(0,_R4),1);}}class _V4 extends _L3{static _W4=8;static _X4=4;static _Y4=0.015;static _Z4=0.4;static __4=0.28;static _05=0.7;static _15=[1116,1188,1277,1356,1422,1491,1557,1617];static _25=[1139,1211,1300,1379,1445,1514,1580,1640];static _35=[556,441,341,225];static _45=[579,464,364,
248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.5,minValue:0,maxValue:1},{name:"damp",automationRate:"a-rate",defaultValue:0.5,minValue:0,maxValue:1},{name:"mix",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(_04){super();const _14=_04.outputChannelCount[0];this._55=-1;this._65=-1;this._75=new Array(_14);this._85=new Array(_14);const _95=[_V4._15,_V4._25];
const _a5=[_V4._35,_V4._45];for(let c=0;c<_14;++c){this._75[c]=new Array(_V4._W4);this._85[c]=new Array(_V4._X4);for(let i=0;i<_V4._W4;++i)this._75[c][i]=new _K4(_95[c%_95.length][i]);for(let i=0;i<_V4._X4;++i)this._85[c][i]=new _U4(_a5[c%_a5.length][i]);}this._b5(0.5);this._S4(0.5);for(let c=0;c<_14;++c)for(let i=0;i<_V4._X4;++i)this._85[c][i]._Q4(0.5);}process(_P3,_Q3,parameters){const _R3=_P3[0];const _X3=_Q3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let c=0;c<_R3.length;++c){const _S3=_R3[c];const _Y3=_X3[c];for(let _T3=0;_T3<_S3.length;++_T3){this._b5(size[_T3]??size[0]);this._S4(damp[_T3]??damp[0]);_Y3[_T3]=_S3[_T3];let out=0;const _44=_S3[_T3]*_V4._Y4;for(let i=0;i<_V4._W4;++i)out+=this._75[c][i].process(_44);for(let i=0;i<_V4._X4;++i)out=this._85[c][i].process(out);if(bypass[_T3]??bypass[0])continue;const _74=(mix[_T3]??mix[0]);_Y3[_T3]*=(1-_74);_Y3[_T3]+=(out*_74);}}return this._M3;}_b5(_L4){if(_L4===this._55)return;const size=(_L4*_V4.__4)+_V4._05;
for(let c=0;c<this._75.length;++c)for(let i=0;i<_V4._W4;++i)this._75[c][i]._Q4(size);this._55=_L4;}_S4(_T4){if(_T4===this._65)return;const damp=_T4*_V4._Z4;for(let c=0;c<this._75.length;++c)for(let i=0;i<_V4._W4;++i)this._75[c][i]._S4(damp);this._65=_T4;}}registerProcessor("reverb1-processor",_V4);